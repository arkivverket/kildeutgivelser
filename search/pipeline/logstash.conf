input {
    file
    {
        tags => "stattholder"
        path => [ "/var/data/xml/stattholder_xml/**/*.xml" ]
        start_position => "beginning"
        max_open_files => 65535
        sincedb_path => "/dev/null"
        file_chunk_size => 1024
        codec => multiline
        {
            pattern => "</TEI>"
            negate => true
            what => "next"
            max_lines => 18000
            max_bytes => "40 MiB"
        }
    }
}

filter
{
    if "stattholder" in [tags] {
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "MURMUR3"
        }

        xml{
            source => "message"
            store_xml => false
            remove_namespaces => true
            xpath =>["string(//title)","HeadTitle"]
            xpath =>["string(//publisher)","publisher"]
            xpath =>["string(//catRef/@target)","catRef"]
            xpath =>["string(//body/descendant::*)","textData"]
            xpath =>["//placeName/text()","placeName"]
            xpath =>["//persName/text()","persName"]
        }

        mutate {
            add_field => {
                "TitleIndexed" => "%{HeadTitle}"
                "PublisherIndexed" =>"%{publisher}"
                "catRefIndexed" => "%{catRef}"
                "textDataIndexed" => "%{textData}"
                "placeNameIndexed" => "%{placeName}"
                "persNameIndexed" => "%{persName}"
            }
        }

        mutate{
            convert => {
                "TitleIndexed" => "string"
                "PublisherIndexed" => "string"
                "catRefIndexed" => "string"
                "textDataIndexed" => "string"
            }
        }

        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE:project_xml_path}/%{NOTSPACE:xml_type}/"
            }
        }

        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE}/%{NOTSPACE}/%{NUMBER:collection_id}_%{NOTSPACE}"
            }
        }

        grok {
            match => {
                "message" => "<idNo>%{NUMBER:publication_id}</idNo>"
            }
        }

        grok {
            match => {
                "message" => "<placeName type=\"sender\" id=\"%{NUMBER:sender_location_id}\">%{DATA:sender_location_name}</placeName>"
            }
        }

        grok {
            match => {
                "message" => "<placeName type=\"adressee\" id=\"%{NUMBER:receiver_location_id}\">%{DATA:receiver_location_name}</placeName>"
            }
        }

        grok {
            match => {
                "message" => "<persName type=\"sender\" id=\"%{NUMBER:sender_subject_id}\">%{DATA:sender_subject_name}</persName>"
            }
        }

        grok {
            match => {
                "message" => "<persName type=\"adressee\" id=\"%{NUMBER:receiver_subject_id}\">%{DATA:receiver_subject_name}</persName>"
            }
        }

        grok {
            match => {
                "message" => "<title type=\"readingtext\" id=\"%{NUMBER:corresp_id}\">%{DATA:corresp_title}</title>"
            }
        }

        ##GET THE DATES
        grok {
            match => {
                "message" => "<origDate>%{NOTSPACE:orig_date}</origDate>"
            }
        }

        ##DATE CONVERT
        if [orig_date] =~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
            date {
                match => ["orig_date","yyyy-MM-dd" ]
            }
        }

        if [orig_date] !~ /[0-9]{4}-[0-9]{2}-[0-9]{2}$/ {
            grok {
                match => {
                    "message" => "<origDate>%{NOTSPACE:orig_date_uncertain}</origDate>"
                }
            }
        }

        ##DATE CONVERT
        if [orig_date] =~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
            grok {
                match => {
                    "message" => "<origDate>%{NOTSPACE:orig_date_certain}</origDate>"
                }
            }

            date {
                match => ["orig_date_certain","yyyy-MM-dd" ]
            }
        }

        if [orig_date] =~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
            grok {
                match => {
                    "message" => "<origDate>%{NOTSPACE:orig_date_year_certain}-%{NOTSPACE:orig_date_month_certain}-%{NOTSPACE:orig_date_day_certain}</origDate>"
                }
            }
        }

        grok {
            match => {
                "message" => "<origDate>%{NOTSPACE:orig_date_year}-%{NOTSPACE:orig_date_month}-%{NOTSPACE:orig_date_day}</origDate>"
            }
        }

        if [orig_date_year] !~ /[0-9]{4}/ {
            grok {
                match => {
                    "message" => "<origDate>%{NOTSPACE:orig_date_year_uncertain}-%{NOTSPACE}-%{NOTSPACE}</origDate>"
                }
            }
        }

        if [orig_date_month] !~ /[0-9]{2}/  {
            grok {
                match => {
                    "message" => "<origDate>%{NOTSPACE}-%{NOTSPACE:orig_date_month_uncertain}-%{NOTSPACE}</origDate>"
                }
            }
        }

        if [orig_date_day] !~ /[0-9]{2}/  {
            grok {
                match => {
                    "message" => "<origDate>%{NOTSPACE}-%{NOTSPACE}-%{NOTSPACE:orig_date_day_uncertain}</origDate>"
                }
            }
        }

        if ![publication_id] {
            grok {
                match => {
                    "path" => "/var/data/xml/%{NOTSPACE}/%{NOTSPACE}/%{NUMBER:collection_id}_%{NUMBER:publication_id}_%{NOTSPACE}.xml"
                }
            }
        }

        grok {
            match => {
                "path" => "/var/data/xml/%{NOTSPACE}/%{NOTSPACE}/%{NUMBER}_%{NUMBER}_%{NOTSPACE}_%{NOTSPACE:type_id}.xml"
            }
        }

        if [publication_id] != "" and "_" not in [publication_id] and "tit" not in [xml_type] and "inl" not in [xml_type] {

                # publication_data
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
				jdbc_user => "${POSTGRES_USER}"
				jdbc_password => "${POSTGRES_PASSWORD}"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => "SELECT p.name as pubname, pc.name as colname, p.genre, p.published, pc.published as collection_published
                                FROM publication p
                                JOIN publication_collection pc ON pc.id = p.publication_collection_id
                                WHERE p.id = :idparam AND pc.deleted!=1 AND p.deleted != 1 ORDER BY pc.id"
                parameters => { "idparam" => "publication_id" }
                target => "publication_data"
            }

            # subjects
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
				jdbc_user => "${POSTGRES_USER}"
				jdbc_password => "${POSTGRES_PASSWORD}"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => " SELECT ev_o.id as occ_id, sub.id, sub.project_id, sub.date_created, sub.date_modified,
                            sub.first_name, sub.last_name, sub.type, sub.place_of_birth, sub.occupation, sub.preposition, sub.full_name,
                            sub.description, sub.legacy_id, sub.date_born, sub.date_deceased, sub.source,
                            ev_o.publication_version_id, ev_o.publication_manuscript_id, ev_o.publication_facsimile_id,
                            ev_o.publication_comment_id, ev_o.publication_facsimile_page
                            FROM event ev
                            JOIN event_connection ev_c ON ev_c.event_id = ev.id
                            JOIN event_occurrence ev_o ON ev_o.event_id = ev.id
                            JOIN publication pub ON pub.id = ev_o.publication_id
                            JOIN subject sub ON ev_c.subject_id = sub.id
                            WHERE pub.id = :idparam AND pub.deleted!=1 AND ev.deleted != 1 AND ev_c.deleted!=1 AND ev_o.deleted!=1 AND sub.deleted!=1"
                parameters => { "idparam" => "publication_id" }
                target => "publication_subjects"
            }

            # locations
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
				jdbc_user => "${POSTGRES_USER}"
				jdbc_password => "${POSTGRES_PASSWORD}"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => " SELECT ev_o.id as occ_id, loc.id, loc.project_id, loc.date_created, loc.date_modified,
                            loc.name, loc.country, loc.city, loc.legacy_id, loc.latitude, loc.longitude, loc.region, loc.source,
                            ev_o.publication_version_id, ev_o.publication_manuscript_id, ev_o.publication_facsimile_id,
                            ev_o.publication_comment_id, ev_o.publication_facsimile_page
                            FROM publication pub
                            JOIN event_occurrence ev_o ON ev_o.publication_id = pub.id
                            JOIN event ev ON ev.id = ev_o.event_id
                            JOIN event_connection ev_c ON ev_c.event_id = ev_o.event_id
                            JOIN location loc ON ev_c.location_id = loc.id
                            WHERE pub.id = :idparam AND pub.deleted!=1 AND ev.deleted != 1 AND ev_c.deleted!=1 AND ev_o.deleted!=1 AND loc.deleted!=1"
                parameters => { "idparam" => "publication_id" }
                target => "publication_locations"
            }

            # tags
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
				jdbc_user => "${POSTGRES_USER}"
				jdbc_password => "${POSTGRES_PASSWORD}"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => " SELECT ev_o.id as occ_id, tag.id, tag.project_id, tag.date_created, tag.date_modified,
                            tag.name, tag.description, tag.legacy_id, tag.source,
                            ev_o.publication_version_id, ev_o.publication_manuscript_id, ev_o.publication_facsimile_id,
                            ev_o.publication_comment_id, ev_o.publication_facsimile_page
                            FROM event ev
                            JOIN event_connection ev_c ON ev_c.event_id = ev.id
                            JOIN event_occurrence ev_o ON ev_o.event_id = ev.id
                            JOIN publication pub ON pub.id = ev_o.publication_id
                            JOIN tag ON ev_c.tag_id = tag.id
                            WHERE pub.id = :idparam AND pub.deleted!=1 AND ev.deleted != 1 AND ev_c.deleted!=1 AND ev_o.deleted!=1 AND tag.deleted!=1"
                parameters => { "idparam" => "publication_id" }
                target => "publication_tags"
            }

        } else if [collection_id] != "" {
            # Collection data
            jdbc_streaming {
                jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
				jdbc_user => "${POSTGRES_USER}"
				jdbc_password => "${POSTGRES_PASSWORD}"
                jdbc_driver_library => "/app/drivers/postgresql-42.2.5.jar"
                jdbc_driver_class => "org.postgresql.Driver"
                statement => "SELECT pc.name as colname, pc.published
                                FROM publication_collection pc
                                WHERE pc.id = :idparam AND pc.deleted!=1 ORDER BY pc.id "
                parameters => { "idparam" => "collection_id" }
                target => "publication_data"
            }
        }

        if "tit" in [xml_type] or "inl" in [xml_type] {
            grok {
                match => {
                    "message" => "<body xml:space=\"preserve\">(?m)%{GREEDYDATA:textData}</body>"
                }
            }
        }

        if [message] {
            mutate {
                remove_field => [ "message" ]
            }
        }
    }
}

## Add your filters / logstash plugins configuration here
output {
    if "stattholder" in [tags]{
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "stattholder"
            document_id => "%{[@metadata][fingerprint]}"
        }
    }
}
